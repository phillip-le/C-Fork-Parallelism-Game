#include "stdio.h"
#include "string.h"
#include "path.h"
#include "deck.h"
#include "stdlib.h"
#include "player.h"
#include "errors.h"
#include "coms.h"
#include "game.h"
#include "utility.h"

void init_games(int playerCount, Game** game) {
    for (int i = 0; i < playerCount; i++) {
        char* pathString = (char*) malloc(sizeof(char) * 80);
        strcpy(pathString, "7;::-Mo1V11V22Mo1Mo1::-");
        game[i] = init_game(i, playerCount, pathString);
        free(pathString);
    }
}

void print_deck(Deck* deck) {
    printf("Cardcount: %d\nCards: ", deck->cardCount);
    for (int i = 0; i < deck->cardCount; i++) {
        printf("%c", get_card_char(deck->cards[i]));
    }
    printf("\n");
    fflush(stdout);
}

void print_player(Path* path, Player* player, int playerCount) {
    printf("Player ID: %d\n", player->pid);
    printf("Player Count: %d\n", playerCount);
    printf("Money: %d\n", player->money);
    printf("V1: %d\n", player->V1);
    printf("V2: %d\n", player->V2);
    printf("Points: %d\n", player->points);
    printf("Current Site: %d\n", player->currentSite);
    print_deck(player->deck);
    // print_path(path, stdout);
}

void test_path(void) {
    char* pathString = (char*) malloc(sizeof(char) * 80);
    strcpy(pathString, "7;::-Mo1V11V22Mo1Mo1::-\n");
    Path* path = read_path(pathString, 2);
    free(pathString);
    // print_path(path, stdout);
    free_path(path);
}

void test_HAP_read(void) {
    char* pathString = (char*) malloc(sizeof(char) * 80);
    strcpy(pathString, "7;::-Mo1V11V22Mo1Mo1::-\n");
    Game* game = init_game(0, 1, pathString);
    add_card(game->players[0]->deck, CARD_A);

    char* HAPstring = (char*) malloc(sizeof(char) * 80);
    strcpy(HAPstring, "HAP0,1,2,3,4");
    recv_player_update(game, HAPstring);
    print_player(game->path, game->players[0], game->playerCount);
    free_game(game);
}

void test_deck_init(void) {
    char* deckString = (char*) malloc(sizeof(char) * 80);
    strcpy(deckString, "7ABACDEE\n");
    Deck* deck = read_deck(deckString);
    print_deck(deck);
}

void test_deck_score(void) {
    CARDS* initCards = (CARDS*) malloc(sizeof(CARDS));
    initCards[0] = get_card('A');
    Deck* deck = create_deck(1, initCards);
    free(initCards);
    char* cards = "ABBBCCDDDEE";
    for (int i = 0; i < (int) strlen(cards); i++) {
        add_card(deck, get_card(cards[i]));
    }
    printf("%d\n", calculate_deck_score(deck));
    free(deck);
}

void test_strtok(void) {
    int info[] = {0, 0, 0, 0, 0};
    char* infoString = (char*) malloc(sizeof(char) * 80);
    strcpy(infoString, "0,1,2,3,4");
    char* invalidChar;
    char* intString = strtok(infoString, ",");
    info[0] = strtol(intString, &invalidChar, 10);
    if (invalidChar[0] != '\0') {
        exit(player_error_msg(PLAYER_COMS));
    }
    for (int i = 1; i < 5; i++) {
        intString = strtok(NULL, ",");
        info[i] = strtol(intString, &invalidChar, 10);
        if (invalidChar[0] != '\0') {
            exit(player_error_msg(PLAYER_COMS));
        }
    }
    for (int i = 0; i < 5; i++) {
        printf("%d", info[i]);
    }
    printf("\n");
}

void test_sort(void) {
    int playerCount = 3;
    Game* game[playerCount];
    init_games(playerCount, game);
    int turnOrder[playerCount];//, playerSites[playerCount];
    char* msgs[3] = {"HAP1,2,0,0,0", "HAP0,2,0,0,0", "HAP0,3,0,0,0"};
    get_turn_order(game[0], turnOrder);
    for (int j = 0; j < playerCount; j++) {
        printf("%d\n", turnOrder[j]);
    }
    for (int i = 0; i < 3; i++) {
        recv_player_update(game[0], msgs[i]);
        get_turn_order(game[0], turnOrder);
        for (int j = 0; j < playerCount; j++) {
            printf("%d\n", turnOrder[j]);
        }
        // print_path(game[0]->path, stdout);
        printf("Turn: %d\n", game[0]->turnCounter);
    }
}

void test_print_path(void) {
    int playerCount = 3;
    Game* game[playerCount];
    init_games(playerCount, game);
    char* msgs[3] = {"HAP1,2,0,0,0", "HAP0,2,0,0,0", "HAP2,2,0,0,0"};
    print_path(stdout, game[0]);
    for (int i = 0; i < 3; i++) {
        recv_player_update(game[0], msgs[i]);
        print_path(stdout, game[0]);
    }
}

void test_highest_occupancy(void) {
    int playerCount = 3;
    Game* game[playerCount];
    init_games(playerCount, game);
    char* msgs[3] = {"HAP1,2,0,0,0", "HAP0,2,0,0,0", "HAP0,3,0,0,0"};
    printf("%d\n", get_highest_occupied(game[0]));
    for (int i = 0; i < 3; i++) {
        recv_player_update(game[0], msgs[i]);
        printf("%d\n", get_highest_occupied(game[0]));
    }
}

void test_game_over(void) {
    int playerCount = 3;
    Game* game[playerCount];
    init_games(playerCount, game);
    char* msgs[4] = {"HAP0,6,0,0,0", "HAP1,6,0,0,0", "HAP2,6,0,0,0", "HAP0,6,0,0,0"};
    int i = 0;
    while (!game_over(game[0])) {
        recv_player_update(game[0], msgs[i++]);
    }
}

void test_splice(void) {
    int playerCount = 3;
    Game* game[playerCount];
    init_games(playerCount, game);
    read_player_update(game[0], "HAP0,1,0,0,0");
}

int main(void) {
    // test_game_over();
    test_splice();
    return 0;
}